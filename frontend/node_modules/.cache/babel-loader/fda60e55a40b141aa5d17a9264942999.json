{"ast":null,"code":"var _jsxFileName = \"/Users/panyutong/Desktop/\\u5B66\\u4E60/INFO90010 IT project/prototype/INFO90010-Prototype/frontend/src/components/SideNav.jsx\";\nimport chainedFunction from 'chained-function';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { PureComponent, cloneElement } from 'react';\nimport { uncontrollable } from 'uncontrollable';\nimport warning from 'warning';\nimport Toggle from './Toggle';\nimport Nav from './Nav';\nimport NavItem from './NavItem';\nimport NavIcon from './NavIcon';\nimport NavText from './NavText';\nimport styles from './index.styl';\nimport match from './match-component';\n\nclass SideNav extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.isToggle = match(Toggle);\n    this.isNav = match(Nav);\n    this.child = {\n      toggle: null,\n      nav: null\n    };\n\n    this.handleClick = event => {\n      if (this.props.disabled) {\n        return;\n      }\n\n      this.toggleExpanded('click');\n    };\n  }\n\n  toggleExpanded(eventType) {\n    const expanded = !this.props.expanded;\n\n    if (this.props.onToggle) {\n      this.props.onToggle(expanded);\n    }\n  }\n\n  renderToggle(child, props) {\n    let ref = c => {\n      this.child.toggle = c;\n    };\n\n    if (typeof child.ref === 'string') {\n      warning(false, 'String refs are not supported on `<SideNav.Toggle>` component. ' + 'To apply a ref to the component use the callback signature:\\n\\n ' + 'https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute');\n    } else {\n      ref = chainedFunction(child.ref, ref);\n    }\n\n    return cloneElement(child, { ...props,\n      ref,\n      onClick: chainedFunction(child.props.onClick, this.handleClick)\n    });\n  }\n\n  renderNav(child, {\n    onSelect,\n    ...props\n  }) {\n    let ref = c => {\n      this.child.nav = c;\n    };\n\n    if (typeof child.ref === 'string') {\n      warning(false, 'String refs are not supported on `<SideNav.Nav>` component. ' + 'To apply a ref to the component use the callback signature:\\n\\n ' + 'https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute');\n    } else {\n      ref = chainedFunction(child.ref, ref);\n    }\n\n    return cloneElement(child, { ...props,\n      ref,\n      onSelect: chainedFunction(child.props.onSelect, onSelect)\n    });\n  }\n\n  render() {\n    const {\n      componentType,\n      // eslint-disable-line\n      componentClass: Component,\n      disabled,\n      expanded,\n      onToggle,\n      // eslint-disable-line\n      onSelect,\n      className,\n      children,\n      ...props\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      className: cx(className, styles.sidenav, {\n        [styles.disabled]: disabled,\n        [styles.expanded]: expanded,\n        [styles.collapsed]: !expanded\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }), React.Children.map(children, child => {\n      if (!React.isValidElement(child)) {\n        return child;\n      }\n\n      if (this.isToggle(child)) {\n        return this.renderToggle(child, {\n          disabled,\n          expanded\n        });\n      }\n\n      if (this.isNav(child)) {\n        return this.renderNav(child, {\n          onSelect,\n          expanded\n        });\n      }\n\n      return child;\n    }));\n  }\n\n} // For component matching\n\n\nSideNav.propTypes = {\n  componentType: PropTypes.any,\n  // A custom element for this component.\n  componentClass: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  // Whether the navigation toggle is disabled.\n  disabled: PropTypes.bool,\n  // Whether the side navigation is expanded or collapsed.\n  expanded: PropTypes.bool,\n  // Callback fired when toggling the side navigation between expanded and collapsed state.\n  onToggle: PropTypes.func,\n  // Callback fired when a navigation item is selected.\n  onSelect: PropTypes.func\n};\nSideNav.defaultProps = {\n  componentClass: 'nav'\n};\nSideNav.defaultProps.componentType = SideNav;\nconst UncontrollableSideNav = uncontrollable(SideNav, {\n  // Define the pairs of prop/handlers you want to be uncontrollable\n  expanded: 'onToggle'\n});\nUncontrollableSideNav.Toggle = Toggle;\nUncontrollableSideNav.Nav = Nav;\nUncontrollableSideNav.NavItem = NavItem;\nUncontrollableSideNav.NavIcon = NavIcon;\nUncontrollableSideNav.NavText = NavText;\nexport default UncontrollableSideNav;","map":{"version":3,"sources":["/Users/panyutong/Desktop/学习/INFO90010 IT project/prototype/INFO90010-Prototype/frontend/src/components/SideNav.jsx"],"names":["chainedFunction","cx","PropTypes","React","PureComponent","cloneElement","uncontrollable","warning","Toggle","Nav","NavItem","NavIcon","NavText","styles","match","SideNav","isToggle","isNav","child","toggle","nav","handleClick","event","props","disabled","toggleExpanded","eventType","expanded","onToggle","renderToggle","ref","c","onClick","renderNav","onSelect","render","componentType","componentClass","Component","className","children","sidenav","collapsed","Children","map","isValidElement","propTypes","any","oneOfType","string","func","bool","defaultProps","UncontrollableSideNav"],"mappings":"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","sourcesContent":["import chainedFunction from 'chained-function';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { PureComponent, cloneElement } from 'react';\nimport { uncontrollable } from 'uncontrollable';\nimport warning from 'warning';\nimport Toggle from './Toggle';\nimport Nav from './Nav';\nimport NavItem from './NavItem';\nimport NavIcon from './NavIcon';\nimport NavText from './NavText';\nimport styles from './index.styl';\nimport match from './match-component';\n\nclass SideNav extends PureComponent {\n    static propTypes = {\n        componentType: PropTypes.any,\n\n        // A custom element for this component.\n        componentClass: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.func\n        ]),\n\n        // Whether the navigation toggle is disabled.\n        disabled: PropTypes.bool,\n\n        // Whether the side navigation is expanded or collapsed.\n        expanded: PropTypes.bool,\n\n        // Callback fired when toggling the side navigation between expanded and collapsed state.\n        onToggle: PropTypes.func,\n\n        // Callback fired when a navigation item is selected.\n        onSelect: PropTypes.func\n    };\n    static defaultProps = {\n        componentClass: 'nav'\n    };\n\n    isToggle = match(Toggle);\n    isNav = match(Nav);\n\n    child = {\n        toggle: null,\n        nav: null\n    };\n\n    handleClick = (event) => {\n        if (this.props.disabled) {\n            return;\n        }\n\n        this.toggleExpanded('click');\n    };\n\n    toggleExpanded(eventType) {\n        const expanded = !this.props.expanded;\n\n        if (this.props.onToggle) {\n            this.props.onToggle(expanded);\n        }\n    }\n    renderToggle(child, props) {\n        let ref = c => {\n            this.child.toggle = c;\n        };\n\n        if (typeof child.ref === 'string') {\n            warning(\n                false,\n                'String refs are not supported on `<SideNav.Toggle>` component. ' +\n                'To apply a ref to the component use the callback signature:\\n\\n ' +\n                'https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute'\n            );\n        } else {\n            ref = chainedFunction(child.ref, ref);\n        }\n\n        return cloneElement(child, {\n            ...props,\n            ref,\n            onClick: chainedFunction(\n                child.props.onClick,\n                this.handleClick\n            )\n        });\n    }\n    renderNav(child, { onSelect, ...props }) {\n        let ref = c => {\n            this.child.nav = c;\n        };\n\n        if (typeof child.ref === 'string') {\n            warning(\n                false,\n                'String refs are not supported on `<SideNav.Nav>` component. ' +\n                'To apply a ref to the component use the callback signature:\\n\\n ' +\n                'https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute'\n            );\n        } else {\n            ref = chainedFunction(child.ref, ref);\n        }\n\n        return cloneElement(child, {\n            ...props,\n            ref,\n            onSelect: chainedFunction(\n                child.props.onSelect,\n                onSelect\n            )\n        });\n    }\n    render() {\n        const {\n            componentType, // eslint-disable-line\n            componentClass: Component,\n            disabled,\n            expanded,\n            onToggle, // eslint-disable-line\n            onSelect,\n            className,\n            children,\n            ...props\n        } = this.props;\n\n        return (\n            <Component\n                {...props}\n                className={cx(\n                    className,\n                    styles.sidenav,\n                    {\n                        [styles.disabled]: disabled,\n                        [styles.expanded]: expanded,\n                        [styles.collapsed]: !expanded\n                    }\n                )}\n            >\n                {React.Children.map(children, child => {\n                    if (!React.isValidElement(child)) {\n                        return child;\n                    }\n\n                    if (this.isToggle(child)) {\n                        return this.renderToggle(child, {\n                            disabled, expanded\n                        });\n                    }\n\n                    if (this.isNav(child)) {\n                        return this.renderNav(child, {\n                            onSelect, expanded\n                        });\n                    }\n\n                    return child;\n                })}\n            </Component>\n        );\n    }\n}\n\n// For component matching\nSideNav.defaultProps.componentType = SideNav;\n\nconst UncontrollableSideNav = uncontrollable(SideNav, {\n    // Define the pairs of prop/handlers you want to be uncontrollable\n    expanded: 'onToggle'\n});\n\nUncontrollableSideNav.Toggle = Toggle;\nUncontrollableSideNav.Nav = Nav;\nUncontrollableSideNav.NavItem = NavItem;\nUncontrollableSideNav.NavIcon = NavIcon;\nUncontrollableSideNav.NavText = NavText;\n\nexport default UncontrollableSideNav;\n"]},"metadata":{},"sourceType":"module"}