{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _getLatitude = _interopRequireDefault(require(\"./getLatitude\"));\n\nvar _getLongitude = _interopRequireDefault(require(\"./getLongitude\"));\n\nvar _toRad = _interopRequireDefault(require(\"./toRad\"));\n\nvar _constants = require(\"./constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar getDistance = function getDistance(start, end) {\n  var accuracy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  accuracy = typeof accuracy !== \"undefined\" && !isNaN(accuracy) ? accuracy : 1;\n  var startLat = (0, _getLatitude.default)(start);\n  var startLon = (0, _getLongitude.default)(start);\n  var endLat = (0, _getLatitude.default)(end);\n  var endLon = (0, _getLongitude.default)(end);\n  var b = 6356752.314245;\n  var ellipsoidParams = 1 / 298.257223563;\n  var L = (0, _toRad.default)(endLon - startLon);\n  var cosSigma;\n  var sigma;\n  var sinAlpha;\n  var cosSqAlpha;\n  var cos2SigmaM;\n  var sinSigma;\n  var U1 = Math.atan((1 - ellipsoidParams) * Math.tan((0, _toRad.default)(parseFloat(startLat))));\n  var U2 = Math.atan((1 - ellipsoidParams) * Math.tan((0, _toRad.default)(parseFloat(endLat))));\n  var sinU1 = Math.sin(U1);\n  var cosU1 = Math.cos(U1);\n  var sinU2 = Math.sin(U2);\n  var cosU2 = Math.cos(U2);\n  var lambda = L;\n  var lambdaP;\n  var iterLimit = 100;\n\n  do {\n    var sinLambda = Math.sin(lambda);\n    var cosLambda = Math.cos(lambda);\n    sinSigma = Math.sqrt(cosU2 * sinLambda * (cosU2 * sinLambda) + (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));\n\n    if (sinSigma === 0) {\n      return 0;\n    }\n\n    cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;\n    sigma = Math.atan2(sinSigma, cosSigma);\n    sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;\n    cosSqAlpha = 1 - sinAlpha * sinAlpha;\n    cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;\n\n    if (isNaN(cos2SigmaM)) {\n      cos2SigmaM = 0;\n    }\n\n    var C = ellipsoidParams / 16 * cosSqAlpha * (4 + ellipsoidParams * (4 - 3 * cosSqAlpha));\n    lambdaP = lambda;\n    lambda = L + (1 - C) * ellipsoidParams * sinAlpha * (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));\n  } while (Math.abs(lambda - lambdaP) > 1e-12 && --iterLimit > 0);\n\n  if (iterLimit === 0) {\n    return NaN;\n  }\n\n  var uSq = cosSqAlpha * (_constants.earthRadius * _constants.earthRadius - b * b) / (b * b);\n  var A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));\n  var B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));\n  var deltaSigma = B * sinSigma * (cos2SigmaM + B / 4 * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM * (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));\n  var distance = b * A * (sigma - deltaSigma);\n  return Math.round(distance / accuracy) * accuracy;\n};\n\nvar _default = getDistance;\nexports.default = _default;","map":{"version":3,"sources":["/Users/panyutong/Desktop/学习/INFO90010 IT project/prototype/INFO90010-Prototype/frontend/node_modules/geolib/es/getPreciseDistance.js"],"names":["Object","defineProperty","exports","value","default","_getLatitude","_interopRequireDefault","require","_getLongitude","_toRad","_constants","obj","__esModule","getDistance","start","end","accuracy","arguments","length","undefined","isNaN","startLat","startLon","endLat","endLon","b","ellipsoidParams","L","cosSigma","sigma","sinAlpha","cosSqAlpha","cos2SigmaM","sinSigma","U1","Math","atan","tan","parseFloat","U2","sinU1","sin","cosU1","cos","sinU2","cosU2","lambda","lambdaP","iterLimit","sinLambda","cosLambda","sqrt","atan2","C","abs","NaN","uSq","earthRadius","A","B","deltaSigma","distance","round","_default"],"mappings":"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","sourcesContent":["\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _getLatitude=_interopRequireDefault(require(\"./getLatitude\"));var _getLongitude=_interopRequireDefault(require(\"./getLongitude\"));var _toRad=_interopRequireDefault(require(\"./toRad\"));var _constants=require(\"./constants\");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var getDistance=function getDistance(start,end){var accuracy=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;accuracy=typeof accuracy!==\"undefined\"&&!isNaN(accuracy)?accuracy:1;var startLat=(0,_getLatitude.default)(start);var startLon=(0,_getLongitude.default)(start);var endLat=(0,_getLatitude.default)(end);var endLon=(0,_getLongitude.default)(end);var b=6356752.314245;var ellipsoidParams=1/298.257223563;var L=(0,_toRad.default)(endLon-startLon);var cosSigma;var sigma;var sinAlpha;var cosSqAlpha;var cos2SigmaM;var sinSigma;var U1=Math.atan((1-ellipsoidParams)*Math.tan((0,_toRad.default)(parseFloat(startLat))));var U2=Math.atan((1-ellipsoidParams)*Math.tan((0,_toRad.default)(parseFloat(endLat))));var sinU1=Math.sin(U1);var cosU1=Math.cos(U1);var sinU2=Math.sin(U2);var cosU2=Math.cos(U2);var lambda=L;var lambdaP;var iterLimit=100;do{var sinLambda=Math.sin(lambda);var cosLambda=Math.cos(lambda);sinSigma=Math.sqrt(cosU2*sinLambda*(cosU2*sinLambda)+(cosU1*sinU2-sinU1*cosU2*cosLambda)*(cosU1*sinU2-sinU1*cosU2*cosLambda));if(sinSigma===0){return 0}cosSigma=sinU1*sinU2+cosU1*cosU2*cosLambda;sigma=Math.atan2(sinSigma,cosSigma);sinAlpha=cosU1*cosU2*sinLambda/sinSigma;cosSqAlpha=1-sinAlpha*sinAlpha;cos2SigmaM=cosSigma-2*sinU1*sinU2/cosSqAlpha;if(isNaN(cos2SigmaM)){cos2SigmaM=0}var C=ellipsoidParams/16*cosSqAlpha*(4+ellipsoidParams*(4-3*cosSqAlpha));lambdaP=lambda;lambda=L+(1-C)*ellipsoidParams*sinAlpha*(sigma+C*sinSigma*(cos2SigmaM+C*cosSigma*(-1+2*cos2SigmaM*cos2SigmaM)))}while(Math.abs(lambda-lambdaP)>1e-12&&--iterLimit>0);if(iterLimit===0){return NaN}var uSq=cosSqAlpha*(_constants.earthRadius*_constants.earthRadius-b*b)/(b*b);var A=1+uSq/16384*(4096+uSq*(-768+uSq*(320-175*uSq)));var B=uSq/1024*(256+uSq*(-128+uSq*(74-47*uSq)));var deltaSigma=B*sinSigma*(cos2SigmaM+B/4*(cosSigma*(-1+2*cos2SigmaM*cos2SigmaM)-B/6*cos2SigmaM*(-3+4*sinSigma*sinSigma)*(-3+4*cos2SigmaM*cos2SigmaM)));var distance=b*A*(sigma-deltaSigma);return Math.round(distance/accuracy)*accuracy};var _default=getDistance;exports.default=_default;"]},"metadata":{},"sourceType":"script"}