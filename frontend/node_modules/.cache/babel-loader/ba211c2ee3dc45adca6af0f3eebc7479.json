{"ast":null,"code":"var _jsxFileName = \"/Users/panyutong/Desktop/\\u5B66\\u4E60/INFO90010 IT project/prototype/INFO90010-Prototype/frontend/src/components/Map.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport * as propertyData from \"./skateboard-parks.json\"; // import { formatRelative } from \"date-fns\";\n\nimport \"@reach/combobox/styles.css\"; // import mapStyles from \"./mapStyles\";\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  height: \"458px\",\n  width: \"906px\"\n};\nconst options = {\n  // styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\nconst center = {\n  lat: -37.807695,\n  lng: 144.961434\n};\nvar imageStyle = {\n  width: \"200px\",\n  height: \"200px\",\n  backgroundRepeat: 'no-repeat'\n};\nexport default function Map() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n    language: \"en-AU\",\n    libraries\n  });\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const [selectedBuilding, setselectedBuilding] = useState(null);\n  useEffect(() => {\n    const listener = e => {\n      if (e.key === \"Escape\") {\n        setselectedBuilding(null);\n      }\n    };\n\n    window.addEventListener(\"keydown\", listener);\n    return () => {\n      window.removeEventListener(\"keydown\", listener);\n    };\n  }, []);\n  const onMapClick = React.useCallback(e => {\n    setMarkers(current => [...current, {\n      lat: e.latLng.lat(),\n      lng: e.latLng.lng(),\n      time: new Date()\n    }]);\n  }, []);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(14);\n  }, []);\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(GoogleMap, {\n    id: \"map\",\n    mapContainerStyle: mapContainerStyle,\n    zoom: 10,\n    center: center,\n    options: options,\n    onClick: onMapClick,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: `${marker.lat}-${marker.lng}`,\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    onClick: () => {\n      setSelected(marker);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  })), selected ? /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: selected.lat,\n      lng: selected.lng\n    },\n    onCloseClick: () => {\n      setSelected(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }) : null, propertyData.Buildings.map(building => /*#__PURE__*/React.createElement(Marker, {\n    key: building.Id,\n    position: {\n      lat: building.geometry.coordinates[1],\n      lng: building.geometry.coordinates[0]\n    },\n    onClick: () => {\n      setselectedBuilding(building);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  })), selectedBuilding && /*#__PURE__*/React.createElement(InfoWindow, {\n    onCloseClick: () => {\n      setselectedBuilding(null);\n    },\n    position: {\n      lat: selectedBuilding.geometry.coordinates[1],\n      lng: selectedBuilding.geometry.coordinates[0]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, selectedBuilding.Properties.sort((a, b) => a.Origin[0].Price - b.Origin[0].Price).map((property, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content-image\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"image\",\n      style: imageStyle,\n      src: property.Src,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 25\n      }\n    }, \"Agent: \", property.Agent), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 25\n      }\n    }, \"Type:\", property.Bedroom, \" Bedroom \", property.Bathroom, \" Bathroom \", property.Parking, \" Parking area\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 25\n      }\n    }, \"Location: \", property.Location), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 25\n      }\n    }, \"Distance:\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 23\n      }\n    }, property.Origin.map((Source, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: \"content-right-main\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-right-name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: Source.Url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 33\n        }\n      }, Source.Name)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-right-price\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 33\n        }\n      }, \"$ \", Source.Price)));\n    })));\n  })))));\n}\n\nfunction Locate({\n  panTo\n}) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, () => null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/compass.svg\",\n    alt: \"compass\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Search({\n  panTo\n}) {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 43.6532,\n        lng: () => -79.3832\n      },\n      radius: 100 * 1000\n    }\n  }); // https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest\n\n  const handleInput = e => {\n    setValue(e.target.value);\n  };\n\n  const handleSelect = async address => {\n    setValue(address, false);\n    clearSuggestions();\n\n    try {\n      const results = await getGeocode({\n        address\n      });\n      const {\n        lat,\n        lng\n      } = await getLatLng(results[0]); // console.log(result);\n\n      panTo({\n        lat,\n        lng\n      });\n    } catch (error) {\n      console.log(\"ðŸ˜± Error: \", error);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: handleSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: handleInput,\n    disabled: !ready,\n    placeholder: \"Search your location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 11\n    }\n  }, status === \"OK\" && data.map(({\n    id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 17\n    }\n  }))))));\n}","map":{"version":3,"sources":["/Users/panyutong/Desktop/å­¦ä¹ /INFO90010 IT project/prototype/INFO90010-Prototype/frontend/src/components/Map.js"],"names":["React","useState","useEffect","GoogleMap","useLoadScript","Marker","InfoWindow","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","propertyData","libraries","mapContainerStyle","height","width","options","disableDefaultUI","zoomControl","center","lat","lng","imageStyle","backgroundRepeat","Map","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_KEY","language","markers","setMarkers","selected","setSelected","selectedBuilding","setselectedBuilding","listener","e","key","window","addEventListener","removeEventListener","onMapClick","useCallback","current","latLng","time","Date","mapRef","useRef","onMapLoad","map","panTo","setZoom","marker","Buildings","building","Id","geometry","coordinates","Properties","sort","a","b","Origin","Price","property","index","Src","Agent","Bedroom","Bathroom","Parking","Location","Source","Url","Name","Locate","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","Search","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","location","radius","handleInput","target","handleSelect","address","results","error","console","log","id","description"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\nimport * as propertyData from \"./skateboard-parks.json\";\n// import { formatRelative } from \"date-fns\";\n\nimport \"@reach/combobox/styles.css\";\n// import mapStyles from \"./mapStyles\";\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  height: \"458px\",\n  width: \"906px\",\n};\nconst options = {\n  // styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\nconst center = {\n  lat: -37.807695,\n  lng: 144.961434,\n};\nvar imageStyle = {\n  width: \"200px\",\n  height: \"200px\",\n  backgroundRepeat: 'no-repeat'\n};\n\nexport default function Map() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n    language: \"en-AU\",\n    libraries,\n  });\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const [selectedBuilding, setselectedBuilding] = useState(null);\n  useEffect(() => {\n    const listener = e => {\n      if (e.key === \"Escape\") {\n        setselectedBuilding(null);\n      }\n    };\n    window.addEventListener(\"keydown\", listener);\n\n    return () => {\n      window.removeEventListener(\"keydown\", listener);\n    };\n  }, []);\n\n  const onMapClick = React.useCallback((e) => {\n    setMarkers((current) => [\n      ...current,\n      {\n        lat: e.latLng.lat(),\n        lng: e.latLng.lng(),\n        time: new Date(),\n      },\n    ]);\n  }, []);\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(14);\n  }, []);\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n\n  return (\n    <div>\n      <Search panTo={panTo} />\n\n      <GoogleMap\n        id=\"map\"\n        mapContainerStyle={mapContainerStyle}\n        zoom={10}\n        center={center}\n        options={options}\n        onClick={onMapClick}\n        onLoad={onMapLoad}\n      >\n        {markers.map((marker) => (\n          <Marker\n            key={`${marker.lat}-${marker.lng}`}\n            position={{ lat: marker.lat, lng: marker.lng }}\n            onClick={() => {\n              setSelected(marker);\n            }}\n          />\n        ))}\n\n        {selected ? (\n          <InfoWindow\n            position={{ lat: selected.lat, lng: selected.lng }}\n            onCloseClick={() => {\n              setSelected(null);\n            }}\n          >\n          </InfoWindow>\n        ) : null}\n        {propertyData.Buildings.map(building => (\n          <Marker\n            key={building.Id}\n            position={{\n              lat: building.geometry.coordinates[1],\n              lng: building.geometry.coordinates[0]\n            }}\n            onClick={() => {\n              setselectedBuilding(building);\n            }}\n          />\n        ))}\n\n        {selectedBuilding && (\n          <InfoWindow\n            onCloseClick={() => {\n              setselectedBuilding(null);\n            }}\n            position={{\n              lat: selectedBuilding.geometry.coordinates[1],\n              lng: selectedBuilding.geometry.coordinates[0]\n            }}\n          >\n            <div>\n              {selectedBuilding.Properties\n                .sort((a, b) => a.Origin[0].Price - b.Origin[0].Price)\n                .map((property, index) => {\n                  return (\n                    <div key={index} className=\"card\">\n                      <div className=\"content-image\">\n                        <img className=\"image\" style={imageStyle} src={property.Src} />\n                      </div>\n                      <div className=\"content-left\">\n                        <p>Agent: {property.Agent}</p>\n                        <p>Type:{property.Bedroom} Bedroom {property.Bathroom} Bathroom {property.Parking} Parking area</p>\n                        <p>Location: {property.Location}</p>\n                        <p>Distance:</p>\n                      </div>\n                      <div className=\"content-right\">\n                        {property.Origin.map((Source, index) => {\n                          return (\n                            <div key={index} className=\"content-right-main\">\n                              <div className=\"content-right-name\">\n                                <a href={Source.Url}>{Source.Name}</a>\n                              </div>\n                              <div className=\"content-right-price\">\n                                <p>$ {Source.Price}</p>\n                              </div>\n                            </div>\n                          )\n                        })\n                        }\n                      </div>\n                    </div>\n                  )\n                })\n              }\n            </div>\n\n          </InfoWindow>\n        )}\n      </GoogleMap>\n    </div>\n  );\n}\n\nfunction Locate({ panTo }) {\n  return (\n    <button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            panTo({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          },\n          () => null\n        );\n      }}\n    >\n      <img src=\"/compass.svg\" alt=\"compass\" />\n    </button>\n  );\n}\n\nfunction Search({ panTo }) {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => 43.6532, lng: () => -79.3832 },\n      radius: 100 * 1000,\n    },\n  });\n\n  // https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest\n\n  const handleInput = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleSelect = async (address) => {\n    setValue(address, false);\n    clearSuggestions();\n\n    try {\n      const results = await getGeocode({ address });\n      const { lat, lng } = await getLatLng(results[0]);\n      // console.log(result);\n      panTo({ lat, lng });\n    } catch (error) {\n      console.log(\"ðŸ˜± Error: \", error);\n    }\n  };\n\n  return (\n    <div className=\"search\">\n      <Combobox onSelect={handleSelect}>\n        <ComboboxInput\n          value={value}\n          onChange={handleInput}\n          disabled={!ready}\n          placeholder=\"Search your location\"\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {status === \"OK\" &&\n              data.map(({ id, description }) => (\n                <ComboboxOption key={id} value={description} />\n              ))}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}