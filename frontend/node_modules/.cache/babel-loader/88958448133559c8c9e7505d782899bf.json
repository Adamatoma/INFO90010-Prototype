{"ast":null,"code":"var _jsxFileName = \"/Users/panyutong/Desktop/\\u5B66\\u4E60/INFO90010 IT project/prototype/INFO90010-Prototype/frontend/src/components/Map.js\";\nimport React, { Component } from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport Autocomplete from 'react-google-autocomplete';\nGeocode.setApiKey(process.env.REACT_APP_GOOGLE_KEY);\nGeocode.enableDebug();\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = addressArray => {\n      let city = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {};\n\n    this.onMarkerDragEnd = event => {\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng();\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : '',\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.onPlaceSelected = place => {\n      console.log('plc', place);\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n   * Get the current address from the default map position and set those values in the state\n   */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log('city', city, area, state);\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  /**\n   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n   *\n   * @param nextProps\n   * @param nextState\n   * @return {boolean}\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n   * Get the city and set the city input value to the one selected\n   *\n   * @param addressArray\n   * @return {string}\n   */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => /*#__PURE__*/React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }\n    }, this.state.address))), /*#__PURE__*/React.createElement(Marker, {\n      google: this.props.google,\n      name: 'Dolores park',\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Marker, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Autocomplete, {\n      style: {\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottom: '500px'\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: ['(regions)'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }\n    }))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }\n      }, \"City\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"city\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.city,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }\n      }, \"Area\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"area\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.area,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }\n      }, \"State\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"state\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.state,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }\n      }, \"Address\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.address,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }\n      }))), /*#__PURE__*/React.createElement(AsyncMap, {\n        googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${GoogleMapsAPI}&libraries=places`,\n        loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 13\n          }\n        }),\n        containerElement: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }\n        }),\n        mapElement: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 9\n        }\n      }));\n    } else {\n      map = /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/panyutong/Desktop/学习/INFO90010 IT project/prototype/INFO90010-Prototype/frontend/src/components/Map.js"],"names":["React","Component","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Geocode","Autocomplete","setApiKey","process","env","REACT_APP_GOOGLE_KEY","enableDebug","Map","constructor","props","getCity","addressArray","city","i","length","types","long_name","getArea","area","j","getState","state","onChange","event","setState","target","name","value","onInfoWindowClose","onMarkerDragEnd","newLat","latLng","lat","newLng","lng","fromLatLng","then","response","address","results","formatted_address","address_components","markerPosition","mapPosition","error","console","onPlaceSelected","place","log","latValue","geometry","location","lngValue","center","componentDidMount","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","padding","margin","width","height","paddingLeft","marginTop","marginBottom","map","undefined","GoogleMapsAPI"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport Autocomplete from 'react-google-autocomplete';\nGeocode.setApiKey(process.env.REACT_APP_GOOGLE_KEY);\nGeocode.enableDebug();\n\nclass Map extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    }\n  }\n\t/**\n\t * Get the current address from the default map position and set those values in the state\n\t */\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(\n      response => {\n        const address = response.results[0].formatted_address,\n          addressArray = response.results[0].address_components,\n          city = this.getCity(addressArray),\n          area = this.getArea(addressArray),\n          state = this.getState(addressArray);\n\n        console.log('city', city, area, state);\n\n        this.setState({\n          address: (address) ? address : '',\n          area: (area) ? area : '',\n          city: (city) ? city : '',\n          state: (state) ? state : '',\n        })\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  };\n\t/**\n\t * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n\t *\n\t * @param nextProps\n\t * @param nextState\n\t * @return {boolean}\n\t */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.state.markerPosition.lat !== this.props.center.lat ||\n      this.state.address !== nextState.address ||\n      this.state.city !== nextState.city ||\n      this.state.area !== nextState.area ||\n      this.state.state !== nextState.state\n    ) {\n      return true\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false\n    }\n  }\n\t/**\n\t * Get the city and set the city input value to the one selected\n\t *\n\t * @param addressArray\n\t * @return {string}\n\t */\n  getCity = (addressArray) => {\n    let city = '';\n    for (let i = 0; i < addressArray.length; i++) {\n      if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n        city = addressArray[i].long_name;\n        return city;\n      }\n    }\n  };\n\t/**\n\t * Get the area and set the area input value to the one selected\n\t *\n\t * @param addressArray\n\t * @return {string}\n\t */\n  getArea = (addressArray) => {\n    let area = '';\n    for (let i = 0; i < addressArray.length; i++) {\n      if (addressArray[i].types[0]) {\n        for (let j = 0; j < addressArray[i].types.length; j++) {\n          if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n            area = addressArray[i].long_name;\n            return area;\n          }\n        }\n      }\n    }\n  };\n\t/**\n\t * Get the address and set the address input value to the one selected\n\t *\n\t * @param addressArray\n\t * @return {string}\n\t */\n  getState = (addressArray) => {\n    let state = '';\n    for (let i = 0; i < addressArray.length; i++) {\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n          state = addressArray[i].long_name;\n          return state;\n        }\n      }\n    }\n  };\n\t/**\n\t * And function for city,state and address input\n\t * @param event\n\t */\n  onChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\t/**\n\t * This Event triggers when the marker window is closed\n\t *\n\t * @param event\n\t */\n  onInfoWindowClose = (event) => {\n\n  };\n\n\t/**\n\t * When the marker is dragged you get the lat and long using the functions available from event object.\n\t * Use geocode to get the address, city, area and state from the lat and lng positions.\n\t * And then set those values in the state.\n\t *\n\t * @param event\n\t */\n  onMarkerDragEnd = (event) => {\n    let newLat = event.latLng.lat(),\n      newLng = event.latLng.lng();\n\n    Geocode.fromLatLng(newLat, newLng).then(\n      response => {\n        const address = response.results[0].formatted_address,\n          addressArray = response.results[0].address_components,\n          city = this.getCity(addressArray),\n          area = this.getArea(addressArray),\n          state = this.getState(addressArray);\n        this.setState({\n          address: (address) ? address : '',\n          area: (area) ? area : '',\n          city: (city) ? city : '',\n          state: (state) ? state : '',\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n        })\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  };\n\n\t/**\n\t * When the user types an address in the search box\n\t * @param place\n\t */\n  onPlaceSelected = (place) => {\n    console.log('plc', place);\n    const address = place.formatted_address,\n      addressArray = place.address_components,\n      city = this.getCity(addressArray),\n      area = this.getArea(addressArray),\n      state = this.getState(addressArray),\n      latValue = place.geometry.location.lat(),\n      lngValue = place.geometry.location.lng();\n    // Set these values in the state.\n    this.setState({\n      address: (address) ? address : '',\n      area: (area) ? area : '',\n      city: (city) ? city : '',\n      state: (state) ? state : '',\n      markerPosition: {\n        lat: latValue,\n        lng: lngValue\n      },\n      mapPosition: {\n        lat: latValue,\n        lng: lngValue\n      },\n    })\n  };\n\n\n  render() {\n    const AsyncMap = withScriptjs(\n      withGoogleMap(\n        props => (\n          <GoogleMap google={this.props.google}\n            defaultZoom={this.props.zoom}\n            defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n          >\n            {/* InfoWindow on top of marker */}\n            <InfoWindow\n              onClose={this.onInfoWindowClose}\n              position={{ lat: (this.state.markerPosition.lat + 0.0018), lng: this.state.markerPosition.lng }}\n            >\n              <div>\n                <span style={{ padding: 0, margin: 0 }}>{this.state.address}</span>\n              </div>\n            </InfoWindow>\n            {/*Marker*/}\n            <Marker google={this.props.google}\n              name={'Dolores park'}\n              draggable={true}\n              onDragEnd={this.onMarkerDragEnd}\n              position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n            />\n            <Marker />\n            {/* For Auto complete Search Box */}\n            <Autocomplete\n              style={{\n                width: '100%',\n                height: '40px',\n                paddingLeft: '16px',\n                marginTop: '2px',\n                marginBottom: '500px'\n              }}\n              onPlaceSelected={this.onPlaceSelected}\n              types={['(regions)']}\n            />\n          </GoogleMap>\n        )\n      )\n    );\n    let map;\n    if (this.props.center.lat !== undefined) {\n      map = <div>\n        <div>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">City</label>\n            <input type=\"text\" name=\"city\" className=\"form-control\" onChange={this.onChange} readOnly=\"readOnly\" value={this.state.city} />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">Area</label>\n            <input type=\"text\" name=\"area\" className=\"form-control\" onChange={this.onChange} readOnly=\"readOnly\" value={this.state.area} />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">State</label>\n            <input type=\"text\" name=\"state\" className=\"form-control\" onChange={this.onChange} readOnly=\"readOnly\" value={this.state.state} />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"\">Address</label>\n            <input type=\"text\" name=\"address\" className=\"form-control\" onChange={this.onChange} readOnly=\"readOnly\" value={this.state.address} />\n          </div>\n        </div>\n\n        <AsyncMap\n          googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${GoogleMapsAPI}&libraries=places`}\n          loadingElement={\n            <div style={{ height: `100%` }} />\n          }\n          containerElement={\n            <div style={{ height: this.props.height }} />\n          }\n          mapElement={\n            <div style={{ height: `100%` }} />\n          }\n        />\n      </div>\n    } else {\n      map = <div style={{ height: this.props.height }} />\n    }\n    return (map)\n  }\n}\nexport default Map"]},"metadata":{},"sourceType":"module"}