{"ast":null,"code":"var _jsxFileName = \"/Users/panyutong/Desktop/\\u5B66\\u4E60/INFO90010 IT project/prototype/INFO90010-Prototype/frontend/src/components/Map.js\";\nimport React from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport { formatRelative } from \"date-fns\";\nimport \"@reach/combobox/styles.css\"; // import mapStyles from \"./mapStyles\";\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  height: \"100vh\",\n  width: \"100vw\"\n};\nconst options = {\n  // styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\nconst center = {\n  lat: 43.6532,\n  lng: -79.3832\n};\nexport default function Map() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyDKKOrM-7XA7DdxvdhPSgDudt0EbfQ6Pd0\",\n    language: \"en-AU\",\n    libraries\n  });\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const onMapClick = React.useCallback(e => {\n    setMarkers(current => [...current, {\n      lat: e.latLng.lat(),\n      lng: e.latLng.lng(),\n      time: new Date()\n    }]);\n  }, []);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(14);\n  }, []);\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, \"Bears\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"tent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \"\\u26FA\\uFE0F\")), /*#__PURE__*/React.createElement(Locate, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Search, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(GoogleMap, {\n    id: \"map\",\n    mapContainerStyle: mapContainerStyle,\n    zoom: 8,\n    center: center,\n    options: options,\n    onClick: onMapClick,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: `${marker.lat}-${marker.lng}`,\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    onClick: () => {\n      setSelected(marker);\n    },\n    icon: {\n      url: `/bear.svg`,\n      origin: new window.google.maps.Point(0, 0),\n      anchor: new window.google.maps.Point(15, 15),\n      scaledSize: new window.google.maps.Size(30, 30)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  })), selected ? /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: selected.lat,\n      lng: selected.lng\n    },\n    onCloseClick: () => {\n      setSelected(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"bear\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, \"\\uD83D\\uDC3B\"), \" \", \"Alert\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  }, \"Spotted \", formatRelative(selected.time, new Date())))) : null));\n}\n\nfunction Locate({\n  panTo\n}) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, () => null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/compass.svg\",\n    alt: \"compass\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Search({\n  panTo\n}) {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 43.6532,\n        lng: () => -79.3832\n      },\n      radius: 100 * 1000\n    }\n  }); // https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest\n\n  const handleInput = e => {\n    setValue(e.target.value);\n  };\n\n  const handleSelect = async address => {\n    setValue(address, false);\n    clearSuggestions();\n\n    try {\n      const results = await getGeocode({\n        address\n      });\n      const {\n        lat,\n        lng\n      } = await getLatLng(results[0]); // console.log(result);\n\n      panTo({\n        lat,\n        lng\n      });\n    } catch (error) {\n      console.log(\"😱 Error: \", error);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: handleSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: handleInput,\n    disabled: !ready,\n    placeholder: \"Search your location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }, status === \"OK\" && data.map(({\n    id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }\n  }))))));\n}","map":{"version":3,"sources":["/Users/panyutong/Desktop/学习/INFO90010 IT project/prototype/INFO90010-Prototype/frontend/src/components/Map.js"],"names":["React","GoogleMap","useLoadScript","Marker","InfoWindow","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","formatRelative","libraries","mapContainerStyle","height","width","options","disableDefaultUI","zoomControl","center","lat","lng","Map","isLoaded","loadError","googleMapsApiKey","language","markers","setMarkers","useState","selected","setSelected","onMapClick","useCallback","e","current","latLng","time","Date","mapRef","useRef","onMapLoad","map","panTo","setZoom","marker","url","origin","window","google","maps","Point","anchor","scaledSize","Size","Locate","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","Search","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","location","radius","handleInput","target","handleSelect","address","results","error","console","log","id","description"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\nimport { formatRelative } from \"date-fns\";\n\nimport \"@reach/combobox/styles.css\";\n// import mapStyles from \"./mapStyles\";\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  height: \"100vh\",\n  width: \"100vw\",\n};\nconst options = {\n  // styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\nconst center = {\n  lat: 43.6532,\n  lng: -79.3832,\n};\n\nexport default function Map() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyDKKOrM-7XA7DdxvdhPSgDudt0EbfQ6Pd0\",\n    language: \"en-AU\",\n    libraries,\n  });\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n\n  const onMapClick = React.useCallback((e) => {\n    setMarkers((current) => [\n      ...current,\n      {\n        lat: e.latLng.lat(),\n        lng: e.latLng.lng(),\n        time: new Date(),\n      },\n    ]);\n  }, []);\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(14);\n  }, []);\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n\n  return (\n    <div>\n      <h1>\n        Bears{\" \"}\n        <span role=\"img\" aria-label=\"tent\">\n          ⛺️\n        </span>\n      </h1>\n\n      <Locate panTo={panTo} />\n      <Search panTo={panTo} />\n\n      <GoogleMap\n        id=\"map\"\n        mapContainerStyle={mapContainerStyle}\n        zoom={8}\n        center={center}\n        options={options}\n        onClick={onMapClick}\n        onLoad={onMapLoad}\n      >\n        {markers.map((marker) => (\n          <Marker\n            key={`${marker.lat}-${marker.lng}`}\n            position={{ lat: marker.lat, lng: marker.lng }}\n            onClick={() => {\n              setSelected(marker);\n            }}\n            icon={{\n              url: `/bear.svg`,\n              origin: new window.google.maps.Point(0, 0),\n              anchor: new window.google.maps.Point(15, 15),\n              scaledSize: new window.google.maps.Size(30, 30),\n            }}\n          />\n        ))}\n\n        {selected ? (\n          <InfoWindow\n            position={{ lat: selected.lat, lng: selected.lng }}\n            onCloseClick={() => {\n              setSelected(null);\n            }}\n          >\n            <div>\n              <h2>\n                <span role=\"img\" aria-label=\"bear\">\n                  🐻\n                </span>{\" \"}\n                Alert\n              </h2>\n              <p>Spotted {formatRelative(selected.time, new Date())}</p>\n            </div>\n          </InfoWindow>\n        ) : null}\n      </GoogleMap>\n    </div>\n  );\n}\n\nfunction Locate({ panTo }) {\n  return (\n    <button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            panTo({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          },\n          () => null\n        );\n      }}\n    >\n      <img src=\"/compass.svg\" alt=\"compass\" />\n    </button>\n  );\n}\n\nfunction Search({ panTo }) {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => 43.6532, lng: () => -79.3832 },\n      radius: 100 * 1000,\n    },\n  });\n\n  // https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest\n\n  const handleInput = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleSelect = async (address) => {\n    setValue(address, false);\n    clearSuggestions();\n\n    try {\n      const results = await getGeocode({ address });\n      const { lat, lng } = await getLatLng(results[0]);\n      // console.log(result);\n      panTo({ lat, lng });\n    } catch (error) {\n      console.log(\"😱 Error: \", error);\n    }\n  };\n\n  return (\n    <div className=\"search\">\n      <Combobox onSelect={handleSelect}>\n        <ComboboxInput\n          value={value}\n          onChange={handleInput}\n          disabled={!ready}\n          placeholder=\"Search your location\"\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {status === \"OK\" &&\n              data.map(({ id, description }) => (\n                <ComboboxOption key={id} value={description} />\n              ))}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}