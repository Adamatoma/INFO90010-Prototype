import { useRef, useEffect, useState, useCallback } from 'react';

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var useLatest = (function (val) {
  var ref = useRef(val);
  useEffect(function () {
    ref.current = val;
  });
  return ref;
});

var _debounce = (function (fn, wait) {
  var timer; // eslint-disable-next-line func-names

  return function () {
    var _this = this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (timer !== null) {
      clearTimeout(timer);
      timer = null;
    }

    timer = setTimeout(function () {
      return fn.apply(_this, args);
    }, wait);
  };
});

var loadApiErr = "ðŸ’¡use-places-autocomplete: Google Maps Places API library must be loaded. See: https://github.com/wellyshen/use-places-autocomplete#load-the-library";

var usePlacesAutocomplete = function usePlacesAutocomplete() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      requestOptions = _ref.requestOptions,
      _ref$debounce = _ref.debounce,
      debounce = _ref$debounce === void 0 ? 200 : _ref$debounce,
      googleMaps = _ref.googleMaps,
      callbackName = _ref.callbackName,
      _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? "" : _ref$defaultValue;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      ready = _useState2[0],
      setReady = _useState2[1];

  var _useState3 = useState(defaultValue),
      _useState4 = _slicedToArray(_useState3, 2),
      value = _useState4[0],
      setVal = _useState4[1];

  var _useState5 = useState({
    loading: false,
    status: "",
    data: []
  }),
      _useState6 = _slicedToArray(_useState5, 2),
      suggestions = _useState6[0],
      setSuggestions = _useState6[1];

  var asRef = useRef(null);
  var requestOptionsRef = useLatest(requestOptions);
  var googleMapsRef = useLatest(googleMaps);
  var init = useCallback(function () {
    var _google$maps;

    var _window = window,
        google = _window.google;
    var gMaps = googleMapsRef.current;
    var placesLib = (gMaps === null || gMaps === void 0 ? void 0 : gMaps.places) || (google === null || google === void 0 ? void 0 : (_google$maps = google.maps) === null || _google$maps === void 0 ? void 0 : _google$maps.places);

    if (!placesLib) {
      console.error(loadApiErr);
      return;
    }

    asRef.current = new placesLib.AutocompleteService();
    setReady(true);
  }, []);
  var clearSuggestions = useCallback(function () {
    setSuggestions({
      loading: false,
      status: "",
      data: []
    });
  }, []);
  var fetchPredictions = useCallback(_debounce(function (val) {
    if (!val) {
      clearSuggestions();
      return;
    } // To keep the previous suggestions


    setSuggestions(function (prevState) {
      return _objectSpread2(_objectSpread2({}, prevState), {}, {
        loading: true
      });
    }); // @ts-expect-error

    asRef.current.getPlacePredictions(_objectSpread2(_objectSpread2({}, requestOptionsRef.current), {}, {
      input: val
    }), function (data, status) {
      setSuggestions({
        loading: false,
        status: status,
        data: data || []
      });
    });
  }, debounce), [debounce, clearSuggestions]);
  var setValue = useCallback(function (val) {
    var shouldFetchData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    setVal(val);
    if (shouldFetchData) fetchPredictions(val);
  }, [fetchPredictions]);
  useEffect(function () {
    var _window2 = window,
        google = _window2.google;

    if (!googleMapsRef.current && !(google === null || google === void 0 ? void 0 : google.maps) && callbackName) {
      window[callbackName] = init;
    } else {
      init();
    }

    return function () {
      // @ts-expect-error
      if (window[callbackName]) delete window[callbackName];
    };
  }, [callbackName, init]);
  return {
    ready: ready,
    value: value,
    suggestions: suggestions,
    setValue: setValue,
    clearSuggestions: clearSuggestions
  };
};

/* eslint-disable compat/compat */
var geocodeErr = "ðŸ’¡use-places-autocomplete: Please provide an address when using getGeocode() with the componentRestrictions.";
var getGeocode = function getGeocode(args) {
  var geocoder = new window.google.maps.Geocoder();
  return new Promise(function (resolve, reject) {
    geocoder.geocode(args, function (results, status) {
      if (status !== "OK") reject(status);

      if (!args.address && args.componentRestrictions) {
        console.error(geocodeErr);
        resolve(results);
      }

      resolve(results);
    });
  });
};
var getLatLng = function getLatLng(result) {
  return new Promise(function (resolve, reject) {
    try {
      var _result$geometry$loca = result.geometry.location,
          lat = _result$geometry$loca.lat,
          lng = _result$geometry$loca.lng;
      resolve({
        lat: lat(),
        lng: lng()
      });
    } catch (error) {
      reject(error);
    }
  });
};
var getZipCode = function getZipCode(result, useShortName) {
  return new Promise(function (resolve, reject) {
    try {
      var zipCode = null;
      result.address_components.forEach(function (_ref) {
        var long_name = _ref.long_name,
            short_name = _ref.short_name,
            types = _ref.types;
        if (types.includes("postal_code")) zipCode = useShortName ? short_name : long_name;
      });
      resolve(zipCode);
    } catch (error) {
      reject(error);
    }
  });
};
var getDetailsErr = "ðŸ’¡use-places-autocomplete: Please provide a place Id when using getDetails() either as a string or as part of an Autocomplete Prediction.";
var getDetails = function getDetails(args) {
  var PlacesService = new window.google.maps.places.PlacesService(document.createElement("div"));
  var placeId = _typeof(args) === "object" ? args.place_id : args;

  if (typeof placeId !== "string") {
    console.error(getDetailsErr);
    return Promise.reject(getDetailsErr);
  }

  return new Promise(function (resolve, reject) {
    PlacesService.getDetails({
      placeId: placeId
    }, function (results, status) {
      if (status !== "OK") reject(status);
      resolve(results);
    });
  });
};

export default usePlacesAutocomplete;
export { getDetails, getGeocode, getLatLng, getZipCode };
